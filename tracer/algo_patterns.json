{
  "ALLREDUCE": {
    "ring": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "ring_reduce_scatter",
          "steps": "p - 1",
          "send_to": "(r + 1) mod p",
          "recv_from": "(r - 1 + p) mod p",
          "message_size": "n / p"
        },
        {
          "desc": "ring_allgather",
          "steps": "p - 1",
          "send_to": "(r - 1 + p) mod p",
          "recv_from": "(r + 1) mod p",
          "message_size": "n / p"
        }
      ],
      "total_steps": "2 * (p - 1)"
    },
    "recursive_doubling": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "recursive_doubling",
          "steps": "log(p, 2)",
          "send_to": "r xor (2 ^ s)",
          "recv_from": "r xor (2 ^ s)",
          "message_size": "n"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "swing_latency": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "recursive_doubling_swing",
          "steps": "log(p, 2)",
          "send_to": "fi(r, s, p)",
          "recv_from": "fi(r, s, p)",
          "message_size": "n"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "rabenseifner": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "reduce_scatter",
          "steps": "log(p, 2)",
          "send_to": "r xor (2 ^ s)",
          "recv_from": "r xor (2 ^ s)",
          "message_size": "n / (2 ^ (s + 1))"
        },
        {
          "desc": "allgather",
          "steps": "log(p, 2)",
          "send_to": "r xor (2 ^ (k - s - 1))",
          "recv_from": "r xor (2 ^ (k - s - 1))",
          "message_size": "n / (2 ^ (k - s))"
        }
      ],
      "total_steps": "2 * log(p, 2)"
    },
    "swing_bandwidth": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "reduce_scatter",
          "steps": "log(p, 2)",
          "send_to": "fi(r, s, p)",
          "recv_from": "fi(r, s, p)",
          "message_size": "n / (2 ^ (s + 1))"
        },
        {
          "desc": "allgather",
          "steps": "log(p, 2)",
          "send_to": "fi(r, (k - s - 1), p)",
          "recv_from": "fi(r, (k - s - 1), p)",
          "message_size": "n / (2 ^ (k - s))"
        }
      ],
      "total_steps": "2 * log(p, 2)"
    }
  },
  "REDUCE_SCATTER": {
    "ring": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "ring_reduce_scatter",
          "steps": "p - 1",
          "send_to": "(r + 1) mod p",
          "recv_from": "(r - 1 + p) mod p",
          "message_size": "n / p"
        }
      ],
      "total_steps": "(p - 1)"
    },
    "distance_doubling": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_doubling",
          "steps": "log(p, 2)",
          "send_to": "r xor (2 ^ s)",
          "recv_from": "r xor (2 ^ s)",
          "message_size": "n / (2 ^ (s + 1))"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "swing_doubling": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_doubling",
          "steps": "log(p, 2)",
          "send_to": "fi(r, s, p)",
          "recv_from": "fi(r, s, p)",
          "message_size": "n / (2 ^ (s + 1))"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "distance_halving": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_halving",
          "steps": "log(p, 2)",
          "send_to": "r xor (2 ^ (k - s - 1))",
          "recv_from": "r xor (2 ^ (k - s - 1))",
          "message_size": "n / (2 ^ (s + 1))"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "swing_halving": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_doubling",
          "steps": "log(p, 2)",
          "send_to": "fi(r, (k - s - 1), p)",
          "recv_from": "fi(r, (k - s - 1), p)",
          "message_size": "n / (2 ^ (s + 1))"
        }
      ],
      "total_steps": "log(p, 2)"
    }
  },
  "ALLGATHER": {
    "ring": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "ring_allgather",
          "steps": "p - 1",
          "send_to": "(r - 1 + p) mod p",
          "recv_from": "(r + 1) mod p",
          "message_size": "n / p"
        }
      ],
      "total_steps": "(p - 1)"
    },
    "distance_doubling": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_doubling",
          "steps": "log(p, 2)",
          "send_to": "r xor (2 ^ s)",
          "recv_from": "r xor (2 ^ s)",
          "message_size": "n / (2 ^ (k - s))"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "swing_doubling": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_doubling",
          "steps": "log(p, 2)",
          "send_to": "fi(r, s, p)",
          "recv_from": "fi(r, s, p)",
          "message_size": "n / (2 ^ (k - s))"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "distance_halving": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_halving",
          "steps": "log(p, 2)",
          "send_to": "r xor (2 ^ (k - s - 1))",
          "recv_from": "r xor (2 ^ (k - s - 1))",
          "message_size": "n / (2 ^ (k - s))"
        }
      ],
      "total_steps": "log(p, 2)"
    },
    "swing_halving": {
      "parameters": {
        "num_ranks": "p",
        "buffer_size": "n",
        "rank": "r",
        "step": "s",
        "num_steps": "k"
      },
      "phases": [
        {
          "desc": "distance_halving",
          "steps": "log(p, 2)",
          "send_to": "fi(r, (k - s - 1), p)",
          "recv_from": "fi(r, (k - s - 1), p)",
          "message_size": "n / (2 ^ (k - s))"
        }
      ],
      "total_steps": "log(p, 2)"
    }
  },
  "BCAST": {}
}
