{
  "default_mpich": {
    "desc": "MPICH default algorithm selection",
    "version": "8.0.0",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "cvar": "auto",
    "tags": [
      "default"
    ]
  },
  "brucks_mpich": {
    "desc": "MPICH Brucks algorithm.",
    "version": "8.0.0",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "cvar": "brucks",
    "tags": [
      "brucks"
    ]
  },
  "non_blocking_mpich": {
    "desc": "MPICH nonblocking algorithm.",
    "version": "8.0.0",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "cvar": "nb",
    "tags": [
      "nb"
    ]
  },
  "recursive_doubling_mpich": {
    "desc": "MPICH recursive doubling algorithm. It works only with power of 2 processes.",
    "version": "8.0.0",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      },
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          }
        ]
      }
    ],
    "cvar": "recursive_doubling",
    "tags": [
      "recursive_doubling"
    ]
  },
  "ring_mpich": {
    "desc": "MPICH ring algorithm. Count must be greater or equal to comm_sz.",
    "version": "8.0.0",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "cvar": "ring",
    "tags": [
      "ring"
    ]
  }
}
