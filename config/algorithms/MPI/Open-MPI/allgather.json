{
  "default_ompi": {
    "desc": "Open MPI default algorithm selection",
    "version": "4.1.5",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "selection": 0,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "default"
    ]
  },
  "linear_ompi": {
    "desc": " Open MPI linear algorithm, consists in a Gather to rank 0 of the whole message followed by a Bcast. Utilizes default Gather and Bcast algorithm selection. This algorithm is used for small messages. It can crash for big tests",
    "version": "4.1.5",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "selection": 1,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "linear",
      "small_sizes",
      "can_crash"
    ]
  },
  "k_bruck_ompi": {
    "desc": "Open MPI K-nomial Bruck algorithm. It requires an additional parameter `radix`. This algorithm is used for medium to large messages",
    "version": "4.1.5",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "selection": 2,
    "additional_parameters": {
      "radix": {
        "desc": "Radix of the K-nomial tree. When not explicitly set it defaults to 2. Still don't know how to change it.",
        "required": false,
        "type": "int",
        "default": 2
      }
    },
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "k_bruck",
      "can_crash",
      "additional_parameter",
      "medium_sizes",
      "large_sizes"
    ]
  },
  "recursive_doubling_ompi": {
    "desc": "Open MPI recursive doubling algorithm. This algorithm is used for small to medium messages. Works only on power of 2 processes. When invoked on non power of 2 processes, it will fallback to k_bruck with `radix=2`",
    "version": "4.1.5",
    "selection": 3,
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      },
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          }
        ]
      }
    ],
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "recursive_doubling",
      "small_sizes",
      "medium_sizes"
    ]
  },
  "ring_ompi": {
    "desc": "Open MPI ring algorithm. This algorithm is used for large messages",
    "version": "4.1.5",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "selection": 4,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "ring",
      "large_sizes"
    ]
  },
  "neighbor_ompi": {
    "desc": "Open MPI neighbor exchange algorithm. This algorithm is used for large messages. Works only for even number of processes. When invoked on odd number of processes, it will fallback to ring",
    "version": "4.1.5",
    "selection": 5,
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      },
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_even",
            "value": true
          }
        ]
      }
    ],
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "neighbor",
      "large_sizes"
    ]
  },
  "two_proc_ompi": {
    "desc": "Open MPI two processes algorithm. Works only for 2 processes",
    "version": "4.1.5",
    "selection": 6,
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      },
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "==",
            "value": 2
          }
        ]
      }
    ],
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "two_proc"
    ]
  }
}
