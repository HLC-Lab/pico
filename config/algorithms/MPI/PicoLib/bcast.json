{
  "scatter_allgather_over": {
    "desc": "Libswing external scatter allgather algorithm. It consists of a binomial tree scatter followed by a recursive doubling allgather. It requires `count` to be greater than `comm_sz`.",
    "version": "1.0.0",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "selection": "pico",
    "tags": [
      "scatter_allgather",
      "segmented",
      "external"
    ]
  },
  "swing_lat_over": {
    "desc": "Libswing external swing latency optimal algorithm. This algorithm uses a binomial tree pattern of communication choosing its peer utilizing `swing` peer selection method `pi`. It works only if `comm` is a power of 2 and root is 0.",
    "version": "1.0.0",
    "constraints": [
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          }
        ]
      },
      {
        "key": "root",
        "conditions": [
          {
            "operator": "==",
            "value": 0
          }
        ]
      }
    ],
    "selection": "pico",
    "tags": [
      "swing_lat",
      "swing",
      "latency_optimal",
      "external"
    ]
  },
  "swing_lat_reversed_over": {
    "desc": "Libswing external swing latency optimal algorithm with reversed peer selection. This algorithm uses a binomial tree pattern of communication choosing its peer utilizing `swing` peer selection method `pi`. It works only if `comm` is a power of 2 and root is 0.",
    "version": "1.0.0",
    "constraints": [
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          }
        ]
      },
      {
        "key": "root",
        "conditions": [
          {
            "operator": "==",
            "value": 0
          }
        ]
      }
    ],
    "selection": "pico",
    "tags": [
      "swing_lat_reversed",
      "swing",
      "latency_optimal",
      "external"
    ]
  },
  "swing_lat_new_over": {
    "desc": "New libswing external swing latency optimal algorithm.",
    "version": "1.0.0",
    "constraints": [
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          }
        ]
      }
    ],
    "selection": "pico",
    "tags": [
      "swing_lat_new",
      "swing",
      "latency_optimal",
      "external"
    ]
  },
  "swing_lat_i_new_over": {
    "desc": "New libswing external swing latency optimal algorithm with isend.",
    "version": "1.0.0",
    "constraints": [
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          }
        ]
      }
    ],
    "selection": "pico",
    "tags": [
      "swing_lat_i_new",
      "swing",
      "latency_optimal",
      "external"
    ]
  },
  "swing_bdw_static_over": {
    "desc": "Libswing external swing bandwidth optimal algorithm with static bitmaps. This algorithm is a combination of a swing scatter and a swing allgather and utilizes static bitmaps. It does not utilizes standard collectives written elsewere since for the allgather phase it calculates which rank needs to send and which don't to avoid wasteful communications. It works only if `comm` is a power of 2 less or equal to 256 and root is 0. Also count must be greater than comm_sz.",
    "version": "1.0.0",
    "constraints": [
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          },
          {
            "operator": "<=",
            "value": 256
          }
        ]
      },
      {
        "key": "root",
        "conditions": [
          {
            "operator": "==",
            "value": 0
          }
        ]
      },
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "selection": "pico",
    "tags": [
      "swing_bdw_static",
      "swing",
      "bandwidth_optimal",
      "suboptimal",
      "static",
      "external"
    ]
  },
  "swing_bdw_remap_over": {
    "desc": "Libswing external swing bandwidth optimal algorithm. This algorithm is a combination of a swing scatter and a swing allgather.",
    "version": "1.0.0",
    "constraints": [
      {
        "key": "comm_sz",
        "conditions": [
          {
            "operator": "is_power_of_two",
            "value": true
          }
        ]
      },
      {
        "key": "root",
        "conditions": [
          {
            "operator": "==",
            "value": 0
          }
        ]
      },
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "selection": "pico",
    "tags": [
      "swing_bdw_remap",
      "remap",
      "swing",
      "bandwidth_optimal",
      "external"
    ]
  }
}
