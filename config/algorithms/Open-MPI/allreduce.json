{
  "default_ompi": {
    "desc": "Open MPI default algorithm selection",
    "version": "4.1.5",
    "dynamic_rule": 0,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "default"
    ]
  },
  "linear_ompi": {
    "desc": "Open MPI linear algorithm from 'basic' module, consists in a Reduce to rank 0 followed by a Bcast. Both Reduce and Bcast are the one from the 'basic' module.",
    "version": "4.1.5",
    "dynamic_rule": 1,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "linear",
      "can_crash"
    ]
  },
  "non_overlapping_ompi": {
    "desc": "Open MPI non-overlapping algorithm, consists in a Reduce to rank 0 followed by a Bcast. Utilizes default Reduce and Bcast algorithm selection.",
    "version": "4.1.5",
    "dynamic_rule": 2,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "non_overlapping",
      "can_crash"
    ]
  },
  "recursive_doubling_ompi": {
    "desc": "Open MPI recursive doubling algorithm.",
    "version": "4.1.5",
    "dynamic_rule": 3,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "recursive_doubling"
    ]
  },
  "ring_ompi": {
    "desc": "Open MPI ring algorithm. Not to be used if 'count'<'comm_sz'. If invoked on 'count'<'comm_sz' fallbacks to 'recursive_doubling'.",
    "version": "4.1.5",
    "dynamic_rule": 4,
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "ring"
    ]
  },
  "ring_segmented_ompi": {
    "desc": "Open MPI ring segmented algorithm. Not to be used if 'count'<'comm_sz'. If invoked on 'count'<'comm_sz' defaults to 'recursive_doubling'.",
    "version": "4.1.5",
    "dynamic_rule": 5,
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
        "required": false,
        "type": "int",
        "default": 0
      }
    },
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "ring_segmented",
      "ring",
      "segmented",
      "can_crash",
      "additional_parameter"
    ]
  },
  "rabenseifner_ompi": {
    "desc": "Open MPI Rabenseifner algorithm. Not to be used if 'count'<'comm_sz'. Not to be used if 'op' is not commutative. If used on not commutative 'op' fallback to 'OMPI_LINEAR'.",
    "version": "4.1.5",
    "dynamic_rule": 6,
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "rabenseifner"
    ]
  },
  "allgather_reduce_ompi": {
    "desc": "Open MPI allgather reduce algorithm.",
    "version": "5.0.0",
    "dynamic_rule": 7,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "allgather_reduce",
      "can_crash"
    ]
  }
}
