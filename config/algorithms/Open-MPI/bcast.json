{
  "default_ompi": {
    "desc": "Open MPI default algorithm selection",
    "version": "4.1.5",
    "dynamic_rule": 0,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "default"
    ]
  },
  "linear_ompi": {
    "desc": "Open MPI linear algorithm, consists in root performing comm_sz - 1 send operations, one to each other process. All other processes perform a single receive operation. It can crash for big tests",
    "version": "4.1.5",
    "dynamic_rule": 1,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "linear",
      "can_crash"
    ]
  },
  "chain_ompi": {
    "desc": "Open MPI chain algorithm. Segments the message using the additional_parameter `segsize` pipelining their send operations to the next process of a chain topology. Each non process posts non blocking receive operations and sends the message to the next process. The actual broadcast is done by `ompi_coll_base_bcast_intra_generic` while `ompi_coll_base_bcast_intra_chain` is responsible for the segmentation and the check/creation of the chain topology.",
    "version": "4.1.5",
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      },
      "chains": {
        "desc": "I think this is the number of chains. Not sure how to change it. For sure is a Communicator related parameter. Look for `faninout` for more details, I'll leave as it is.",
        "required": false,
        "type": "int32_t",
        "default": 0
      }
    },
    "dynamic_rule": 2,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "chain",
      "segmented",
      "suboptimal",
      "additional_parameter"
    ]
  },
  "pipeline_ompi": {
    "desc": "Open MPI pipeline algorithm. Segments the message using the additional_parameter `segsize` pipelining their send operations to the next process into a pipeline. Each non process posts non blocking receive operations and sends the message to the next process. The actual broadcast is done by `ompi_coll_base_bcast_intra_generic` while `ompi_coll_base_bcast_intra_pipeline` is responsible for the segmentation and the check/creation of the pipelined topology.",
    "version": "4.1.5",
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      }
    },
    "dynamic_rule": 3,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "pipeline",
      "segmented",
      "suboptimal",
      "additional_parameter"
    ]
  },
  "split_binary_ompi": {
    "desc": "Open MPI split‐binary tree broadcast. It divides the overall message into two halves and then uses a binary‐tree–based dissemination within each half, followed by a final exchange to “stitch” the two halves together where every process finds its pair in the other branch of the tree. Uses the additional parameter `segsize` to further segment the communications. If message is to small it will fallback to `chain_ompi`.",
    "version": "4.1.5",
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      }
    },
    "dynamic_rule": 4,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "split_binary",
      "additional_parameter",
      "segmented"
    ]
  },
  "binary_ompi": {
    "desc": "Open MPI binary tree broadcast. It uses the `ompi_coll_base_bcast_intra_generic` for the actual broadcast. This function is responsible for the check/creation of the binary tree topology and for the segmentation of the message.",
    "version": "4.1.5",
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      }
    },
    "dynamic_rule": 5,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "binary",
      "segmented",
      "additional_parameter"
    ]
  },
  "binomial_ompi": {
    "desc": "Open MPI binomial tree broadcast. It uses the `ompi_coll_base_bcast_intra_generic` for the actual broadcast. This function is responsible for the check/creation of the binomial tree topology and for the segmentation of the message.",
    "version": "4.1.5",
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      }
    },
    "dynamic_rule": 6,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "binomial",
      "segmented",
      "additional_parameter"
    ]
  },
  "knomial_ompi": {
    "desc": "Open MPI k-nomial tree broadcast. It uses the `ompi_coll_base_bcast_intra_generic` for the actual broadcast. This function is responsible for the check/creation of the k-nomial tree topology and for the segmentation of the message. It requires an additional parameter `radix`.",
    "version": "4.1.5",
    "additional_parameters": {
      "radix": {
        "desc": "Radix of the K-nomial tree",
        "required": true,
        "type": "int"
      },
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      }
    },
    "dynamic_rule": 7,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "knomial",
      "additional_parameter",
      "segmented"
    ]
  },
  "scatter_allgather_ompi": {
    "desc": "Open MPI scatter allgather algorithm. It consists of a binomial tree scatter followed by a recursive doubling allgather. It requires `count` to be greater than `comm_sz`. If not, it will fallback to `linear`'s bcast. It requires an additional parameter `segsize` but it appears by the code to not be used.",
    "version": "4.1.5",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      }
    },
    "dynamic_rule": 8,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "scatter_allgather",
      "segmented",
      "additional_parameter"
    ]
  },
  "scatter_allgather_ring_ompi": {
    "desc": "Open MPI scatter allgather ring algorithm. It consists of a binomial tree scatter followed by a ring allgather. It requires `count` to be greater than `comm_sz`. If not, it will fallback to `linear`'s bcast. It requires an additional parameter `segsize` but it appears by the code to not be used.",
    "version": "4.1.5",
    "constraints": [
      {
        "key": "count",
        "conditions": [
          {
            "operator": ">=",
            "value": "comm_sz"
          }
        ]
      }
    ],
    "additional_parameters": {
      "segsize": {
        "desc": "Size of the segments used to pipeline communication and computation.",
        "required": false,
        "type": "uint32_t",
        "default": 0
      }
    },
    "dynamic_rule": 9,
    "cuda_support": "yes",
    "rocm_support": "ucx",
    "tags": [
      "scatter_allgather_ring",
      "segmented",
      "additional_parameter"
    ]
  }
}
